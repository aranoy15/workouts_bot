package messages

import (
	"fmt"
	"workouts_bot/pkg/logger"
	"workouts_bot/src/bot/handlers"
	"workouts_bot/src/bot/keyboards"
	"workouts_bot/src/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

type SettingsHandler struct {
	bot         *tgbotapi.BotAPI
	userService *services.UserService
}

func NewSettingsHandler(bot *tgbotapi.BotAPI, database *gorm.DB) *SettingsHandler {
	return &SettingsHandler{
		bot:         bot,
		userService: services.NewUserService(database),
	}
}

func (handler *SettingsHandler) Handle(update tgbotapi.Update) error {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	logger.WithFields(logrus.Fields{
		"chat_id": chatID,
		"user_id": userID,
	}).Info("Settings handler")

	user, err := handler.userService.GetByTelegramID(userID)
	if err != nil {
		logger.Error("Failed to get user by telegram ID: ", err)
		handlers.SendErrorMessage(
			handler.bot, chatID,
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		)
		return err
	}

	message := "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"

	message += "üéØ –¶–µ–ª–∏:\n"
	if len(user.Goals) == 0 {
		message += "   –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
	} else {
		for _, goal := range user.Goals {
			message += fmt.Sprintf("   ‚Ä¢ %s\n", getGoalEmoji(string(goal)))
		}
	}
	message += "\n"

	message += fmt.Sprintf("üìà –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: %s\n\n", getExperienceLevel(user.Experience))
	message += "üèãÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n"
	if len(user.EquipmentIDs) == 0 {
		message += "   –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
	} else {
		message += fmt.Sprintf("   –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ %d —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n", len(user.EquipmentIDs))
	}
	message += "\n"

	message += "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
	if len(user.Limitations) == 0 {
		message += "   –ù–µ —É–∫–∞–∑–∞–Ω—ã\n"
	} else {
		for _, limitation := range user.Limitations {
			message += fmt.Sprintf("   ‚Ä¢ %s\n", limitation)
		}
	}
	message += "\n"

	message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = keyboards.CreateSettingsKeyboard()

	_, err = handler.bot.Send(msg)
	return err
}

func getGoalEmoji(goal string) string {
	switch goal {
	case "muscle_gain":
		return "üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
	case "strength":
		return "üèãÔ∏è –°–∏–ª–∞"
	case "endurance":
		return "üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"
	case "weight_loss":
		return "üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ"
	default:
		return "üìã " + goal
	}
}

func getExperienceLevel(experience int) string {
	switch {
	case experience <= 1:
		return "üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π"
	case experience <= 3:
		return "üü° –°—Ä–µ–¥–Ω–∏–π"
	case experience <= 5:
		return "üü† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
	default:
		return "üî¥ –≠–∫—Å–ø–µ—Ä—Ç"
	}
}
