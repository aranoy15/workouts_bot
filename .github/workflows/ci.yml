name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: workouts_db_test
          POSTGRES_USER: workouts_user
          POSTGRES_PASSWORD: workouts_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race ./...
      env:
        DATABASE_URL: postgres://workouts_user:workouts_password@localhost:5432/workouts_db_test?sslmode=disable

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: |
        mkdir -p bin
        go build -o bin/bot cmd/bot/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bot-binary
        path: bin/bot
        retention-days: 7


  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: workouts-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-test:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: workouts-bot:test

    - name: Test Docker image
      run: |
        docker run --rm \
          -e BOT_TOKEN=test_token \
          -e LOG_LEVEL=debug \
          workouts-bot:test --help || echo "Container built successfully"
